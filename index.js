import {Telegraf, Scenes, session} from "telegraf";
import dotenv from "dotenv";
import inputDataScene from "./src/handlers/scenes/inputData.js";
import {messages} from "./src/config/constants.js";

dotenv.config();

const token = process.env.BOT_TOKEN;
const ids = process.env.USER_IDS;

const bot = new Telegraf(token);
const stage = new Scenes.Stage([inputDataScene]);

const allowedUsers = (ids || "")
    .split(',')
    .map(id => Number(id.trim()))
    .filter(id => !isNaN(id));


// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É
bot.use(async (ctx, next) => {
    const userId = ctx.from?.id;
    if (!userId || !allowedUsers.includes(userId)) {
        await ctx.reply(messages.access_denied);
        return;
    }
    await next();
});

// –°–µ—Å—ñ—è —Ç–∞ —Å—Ü–µ–Ω–∏
bot.use(session());
bot.use(stage.middleware());

// –ö–æ–º–∞–Ω–¥–∏
bot.telegram.setMyCommands([
    { command: "start", description: "–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É" },
    { command: "stop", description: "–°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ" }
]);

// –û–±—Ä–æ–±–Ω–∏–∫ /start
bot.command("start", async (ctx) => {
    ctx.session = {}; // –°–∫–∏–¥–∞–Ω–Ω—è —Å–µ—Å—ñ—ó
    await ctx.reply("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π! –í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.");
    await ctx.scene.enter("input_data"); // –ë–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ü–µ–Ω—É
});

// –û–±—Ä–æ–±–Ω–∏–∫ /stop
bot.command("stop", async (ctx) => {
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å—Ü–µ–Ω–∞, —ñ –≤–∏—Ö–æ–¥–∏–º–æ –∑ –Ω–µ—ó
        if (ctx.scene) {
            await ctx.scene.leave();
        }

        // –°–∫–∏–¥–∞—î–º–æ –≤—Å—ñ —Å–µ—Å—ñ–π–Ω—ñ –¥–∞–Ω—ñ
        ctx.session = {};

        // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await ctx.reply(messages.reset_data);
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ:", error);
        ctx.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∏–Ω—É—Ç–∏ –¥–∞–Ω—ñ");
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π");
